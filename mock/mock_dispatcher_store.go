// Code generated by MockGen. DO NOT EDIT.
// Source: dispatcher_store.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDispatcherStore is a mock of DispatcherStore interface
type MockDispatcherStore struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherStoreMockRecorder
}

// MockDispatcherStoreMockRecorder is the mock recorder for MockDispatcherStore
type MockDispatcherStoreMockRecorder struct {
	mock *MockDispatcherStore
}

// NewMockDispatcherStore creates a new mock instance
func NewMockDispatcherStore(ctrl *gomock.Controller) *MockDispatcherStore {
	mock := &MockDispatcherStore{ctrl: ctrl}
	mock.recorder = &MockDispatcherStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatcherStore) EXPECT() *MockDispatcherStoreMockRecorder {
	return m.recorder
}

// Join mocks base method
func (m *MockDispatcherStore) Join(serverID, httpAddress, raftAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", serverID, httpAddress, raftAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockDispatcherStoreMockRecorder) Join(serverID, httpAddress, raftAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockDispatcherStore)(nil).Join), serverID, httpAddress, raftAddress)
}

// Leader mocks base method
func (m *MockDispatcherStore) Leader() (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leader")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Leader indicates an expected call of Leader
func (mr *MockDispatcherStoreMockRecorder) Leader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leader", reflect.TypeOf((*MockDispatcherStore)(nil).Leader))
}

// Apply mocks base method
func (m *MockDispatcherStore) Apply(buf []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", buf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockDispatcherStoreMockRecorder) Apply(buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockDispatcherStore)(nil).Apply), buf)
}
