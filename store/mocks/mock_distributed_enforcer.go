// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/casbin/casbin/v2 (interfaces: IDistributedEnforcer)

// Package mocks is a generated GoMock package.
package mocks

import (
	govaluate "github.com/Knetic/govaluate"
	effect "github.com/casbin/casbin/v2/effect"
	model "github.com/casbin/casbin/v2/model"
	persist "github.com/casbin/casbin/v2/persist"
	rbac "github.com/casbin/casbin/v2/rbac"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIDistributedEnforcer is a mock of IDistributedEnforcer interface
type MockIDistributedEnforcer struct {
	ctrl     *gomock.Controller
	recorder *MockIDistributedEnforcerMockRecorder
}

// MockIDistributedEnforcerMockRecorder is the mock recorder for MockIDistributedEnforcer
type MockIDistributedEnforcerMockRecorder struct {
	mock *MockIDistributedEnforcer
}

// NewMockIDistributedEnforcer creates a new mock instance
func NewMockIDistributedEnforcer(ctrl *gomock.Controller) *MockIDistributedEnforcer {
	mock := &MockIDistributedEnforcer{ctrl: ctrl}
	mock.recorder = &MockIDistributedEnforcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDistributedEnforcer) EXPECT() *MockIDistributedEnforcerMockRecorder {
	return m.recorder
}

// AddFunction mocks base method
func (m *MockIDistributedEnforcer) AddFunction(arg0 string, arg1 govaluate.ExpressionFunction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFunction", arg0, arg1)
}

// AddFunction indicates an expected call of AddFunction
func (mr *MockIDistributedEnforcerMockRecorder) AddFunction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFunction", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddFunction), arg0, arg1)
}

// AddGroupingPolicies mocks base method
func (m *MockIDistributedEnforcer) AddGroupingPolicies(arg0 [][]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupingPolicies", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupingPolicies indicates an expected call of AddGroupingPolicies
func (mr *MockIDistributedEnforcerMockRecorder) AddGroupingPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupingPolicies", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddGroupingPolicies), arg0)
}

// AddGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) AddGroupingPolicy(arg0 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupingPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupingPolicy indicates an expected call of AddGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) AddGroupingPolicy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddGroupingPolicy), arg0...)
}

// AddNamedGroupingPolicies mocks base method
func (m *MockIDistributedEnforcer) AddNamedGroupingPolicies(arg0 string, arg1 [][]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamedGroupingPolicies", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNamedGroupingPolicies indicates an expected call of AddNamedGroupingPolicies
func (mr *MockIDistributedEnforcerMockRecorder) AddNamedGroupingPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamedGroupingPolicies", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddNamedGroupingPolicies), arg0, arg1)
}

// AddNamedGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) AddNamedGroupingPolicy(arg0 string, arg1 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNamedGroupingPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNamedGroupingPolicy indicates an expected call of AddNamedGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) AddNamedGroupingPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamedGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddNamedGroupingPolicy), varargs...)
}

// AddNamedPolicies mocks base method
func (m *MockIDistributedEnforcer) AddNamedPolicies(arg0 string, arg1 [][]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamedPolicies", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNamedPolicies indicates an expected call of AddNamedPolicies
func (mr *MockIDistributedEnforcerMockRecorder) AddNamedPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamedPolicies", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddNamedPolicies), arg0, arg1)
}

// AddNamedPolicy mocks base method
func (m *MockIDistributedEnforcer) AddNamedPolicy(arg0 string, arg1 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNamedPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNamedPolicy indicates an expected call of AddNamedPolicy
func (mr *MockIDistributedEnforcerMockRecorder) AddNamedPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamedPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddNamedPolicy), varargs...)
}

// AddPermissionForUser mocks base method
func (m *MockIDistributedEnforcer) AddPermissionForUser(arg0 string, arg1 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPermissionForUser", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPermissionForUser indicates an expected call of AddPermissionForUser
func (mr *MockIDistributedEnforcerMockRecorder) AddPermissionForUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddPermissionForUser), varargs...)
}

// AddPolicies mocks base method
func (m *MockIDistributedEnforcer) AddPolicies(arg0 [][]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicies", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicies indicates an expected call of AddPolicies
func (mr *MockIDistributedEnforcerMockRecorder) AddPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicies", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddPolicies), arg0)
}

// AddPolicy mocks base method
func (m *MockIDistributedEnforcer) AddPolicy(arg0 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicy indicates an expected call of AddPolicy
func (mr *MockIDistributedEnforcerMockRecorder) AddPolicy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddPolicy), arg0...)
}

// AddPolicySelf mocks base method
func (m *MockIDistributedEnforcer) AddPolicySelf(arg0 func() bool, arg1, arg2 string, arg3 [][]string) ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicySelf", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicySelf indicates an expected call of AddPolicySelf
func (mr *MockIDistributedEnforcerMockRecorder) AddPolicySelf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicySelf", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddPolicySelf), arg0, arg1, arg2, arg3)
}

// AddRoleForUser mocks base method
func (m *MockIDistributedEnforcer) AddRoleForUser(arg0, arg1 string, arg2 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRoleForUser", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoleForUser indicates an expected call of AddRoleForUser
func (mr *MockIDistributedEnforcerMockRecorder) AddRoleForUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddRoleForUser), varargs...)
}

// AddRoleForUserInDomain mocks base method
func (m *MockIDistributedEnforcer) AddRoleForUserInDomain(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleForUserInDomain", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoleForUserInDomain indicates an expected call of AddRoleForUserInDomain
func (mr *MockIDistributedEnforcerMockRecorder) AddRoleForUserInDomain(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleForUserInDomain", reflect.TypeOf((*MockIDistributedEnforcer)(nil).AddRoleForUserInDomain), arg0, arg1, arg2)
}

// BuildRoleLinks mocks base method
func (m *MockIDistributedEnforcer) BuildRoleLinks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildRoleLinks")
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildRoleLinks indicates an expected call of BuildRoleLinks
func (mr *MockIDistributedEnforcerMockRecorder) BuildRoleLinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRoleLinks", reflect.TypeOf((*MockIDistributedEnforcer)(nil).BuildRoleLinks))
}

// ClearPolicy mocks base method
func (m *MockIDistributedEnforcer) ClearPolicy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearPolicy")
}

// ClearPolicy indicates an expected call of ClearPolicy
func (mr *MockIDistributedEnforcerMockRecorder) ClearPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).ClearPolicy))
}

// ClearPolicySelf mocks base method
func (m *MockIDistributedEnforcer) ClearPolicySelf(arg0 func() bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearPolicySelf", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearPolicySelf indicates an expected call of ClearPolicySelf
func (mr *MockIDistributedEnforcerMockRecorder) ClearPolicySelf(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearPolicySelf", reflect.TypeOf((*MockIDistributedEnforcer)(nil).ClearPolicySelf), arg0)
}

// DeletePermission mocks base method
func (m *MockIDistributedEnforcer) DeletePermission(arg0 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermission", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission
func (mr *MockIDistributedEnforcerMockRecorder) DeletePermission(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockIDistributedEnforcer)(nil).DeletePermission), arg0...)
}

// DeletePermissionForUser mocks base method
func (m *MockIDistributedEnforcer) DeletePermissionForUser(arg0 string, arg1 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermissionForUser", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionForUser indicates an expected call of DeletePermissionForUser
func (mr *MockIDistributedEnforcerMockRecorder) DeletePermissionForUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).DeletePermissionForUser), varargs...)
}

// DeletePermissionsForUser mocks base method
func (m *MockIDistributedEnforcer) DeletePermissionsForUser(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionsForUser", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionsForUser indicates an expected call of DeletePermissionsForUser
func (mr *MockIDistributedEnforcerMockRecorder) DeletePermissionsForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionsForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).DeletePermissionsForUser), arg0)
}

// DeleteRole mocks base method
func (m *MockIDistributedEnforcer) DeleteRole(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockIDistributedEnforcerMockRecorder) DeleteRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIDistributedEnforcer)(nil).DeleteRole), arg0)
}

// DeleteRoleForUser mocks base method
func (m *MockIDistributedEnforcer) DeleteRoleForUser(arg0, arg1 string, arg2 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoleForUser", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleForUser indicates an expected call of DeleteRoleForUser
func (mr *MockIDistributedEnforcerMockRecorder) DeleteRoleForUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).DeleteRoleForUser), varargs...)
}

// DeleteRoleForUserInDomain mocks base method
func (m *MockIDistributedEnforcer) DeleteRoleForUserInDomain(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleForUserInDomain", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleForUserInDomain indicates an expected call of DeleteRoleForUserInDomain
func (mr *MockIDistributedEnforcerMockRecorder) DeleteRoleForUserInDomain(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleForUserInDomain", reflect.TypeOf((*MockIDistributedEnforcer)(nil).DeleteRoleForUserInDomain), arg0, arg1, arg2)
}

// DeleteRolesForUser mocks base method
func (m *MockIDistributedEnforcer) DeleteRolesForUser(arg0 string, arg1 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRolesForUser", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRolesForUser indicates an expected call of DeleteRolesForUser
func (mr *MockIDistributedEnforcerMockRecorder) DeleteRolesForUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolesForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).DeleteRolesForUser), varargs...)
}

// DeleteUser mocks base method
func (m *MockIDistributedEnforcer) DeleteUser(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockIDistributedEnforcerMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).DeleteUser), arg0)
}

// EnableAutoBuildRoleLinks mocks base method
func (m *MockIDistributedEnforcer) EnableAutoBuildRoleLinks(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableAutoBuildRoleLinks", arg0)
}

// EnableAutoBuildRoleLinks indicates an expected call of EnableAutoBuildRoleLinks
func (mr *MockIDistributedEnforcerMockRecorder) EnableAutoBuildRoleLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAutoBuildRoleLinks", reflect.TypeOf((*MockIDistributedEnforcer)(nil).EnableAutoBuildRoleLinks), arg0)
}

// EnableAutoNotifyWatcher mocks base method
func (m *MockIDistributedEnforcer) EnableAutoNotifyWatcher(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableAutoNotifyWatcher", arg0)
}

// EnableAutoNotifyWatcher indicates an expected call of EnableAutoNotifyWatcher
func (mr *MockIDistributedEnforcerMockRecorder) EnableAutoNotifyWatcher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAutoNotifyWatcher", reflect.TypeOf((*MockIDistributedEnforcer)(nil).EnableAutoNotifyWatcher), arg0)
}

// EnableAutoSave mocks base method
func (m *MockIDistributedEnforcer) EnableAutoSave(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableAutoSave", arg0)
}

// EnableAutoSave indicates an expected call of EnableAutoSave
func (mr *MockIDistributedEnforcerMockRecorder) EnableAutoSave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAutoSave", reflect.TypeOf((*MockIDistributedEnforcer)(nil).EnableAutoSave), arg0)
}

// EnableEnforce mocks base method
func (m *MockIDistributedEnforcer) EnableEnforce(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableEnforce", arg0)
}

// EnableEnforce indicates an expected call of EnableEnforce
func (mr *MockIDistributedEnforcerMockRecorder) EnableEnforce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableEnforce", reflect.TypeOf((*MockIDistributedEnforcer)(nil).EnableEnforce), arg0)
}

// EnableLog mocks base method
func (m *MockIDistributedEnforcer) EnableLog(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableLog", arg0)
}

// EnableLog indicates an expected call of EnableLog
func (mr *MockIDistributedEnforcerMockRecorder) EnableLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableLog", reflect.TypeOf((*MockIDistributedEnforcer)(nil).EnableLog), arg0)
}

// Enforce mocks base method
func (m *MockIDistributedEnforcer) Enforce(arg0 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enforce", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enforce indicates an expected call of Enforce
func (mr *MockIDistributedEnforcerMockRecorder) Enforce(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enforce", reflect.TypeOf((*MockIDistributedEnforcer)(nil).Enforce), arg0...)
}

// EnforceEx mocks base method
func (m *MockIDistributedEnforcer) EnforceEx(arg0 ...interface{}) (bool, []string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnforceEx", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnforceEx indicates an expected call of EnforceEx
func (mr *MockIDistributedEnforcerMockRecorder) EnforceEx(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceEx", reflect.TypeOf((*MockIDistributedEnforcer)(nil).EnforceEx), arg0...)
}

// EnforceExWithMatcher mocks base method
func (m *MockIDistributedEnforcer) EnforceExWithMatcher(arg0 string, arg1 ...interface{}) (bool, []string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnforceExWithMatcher", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnforceExWithMatcher indicates an expected call of EnforceExWithMatcher
func (mr *MockIDistributedEnforcerMockRecorder) EnforceExWithMatcher(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceExWithMatcher", reflect.TypeOf((*MockIDistributedEnforcer)(nil).EnforceExWithMatcher), varargs...)
}

// EnforceWithMatcher mocks base method
func (m *MockIDistributedEnforcer) EnforceWithMatcher(arg0 string, arg1 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnforceWithMatcher", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnforceWithMatcher indicates an expected call of EnforceWithMatcher
func (mr *MockIDistributedEnforcerMockRecorder) EnforceWithMatcher(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceWithMatcher", reflect.TypeOf((*MockIDistributedEnforcer)(nil).EnforceWithMatcher), varargs...)
}

// GetAdapter mocks base method
func (m *MockIDistributedEnforcer) GetAdapter() persist.Adapter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdapter")
	ret0, _ := ret[0].(persist.Adapter)
	return ret0
}

// GetAdapter indicates an expected call of GetAdapter
func (mr *MockIDistributedEnforcerMockRecorder) GetAdapter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdapter", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAdapter))
}

// GetAllActions mocks base method
func (m *MockIDistributedEnforcer) GetAllActions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllActions indicates an expected call of GetAllActions
func (mr *MockIDistributedEnforcerMockRecorder) GetAllActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActions", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAllActions))
}

// GetAllNamedActions mocks base method
func (m *MockIDistributedEnforcer) GetAllNamedActions(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNamedActions", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllNamedActions indicates an expected call of GetAllNamedActions
func (mr *MockIDistributedEnforcerMockRecorder) GetAllNamedActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNamedActions", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAllNamedActions), arg0)
}

// GetAllNamedObjects mocks base method
func (m *MockIDistributedEnforcer) GetAllNamedObjects(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNamedObjects", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllNamedObjects indicates an expected call of GetAllNamedObjects
func (mr *MockIDistributedEnforcerMockRecorder) GetAllNamedObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNamedObjects", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAllNamedObjects), arg0)
}

// GetAllNamedRoles mocks base method
func (m *MockIDistributedEnforcer) GetAllNamedRoles(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNamedRoles", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllNamedRoles indicates an expected call of GetAllNamedRoles
func (mr *MockIDistributedEnforcerMockRecorder) GetAllNamedRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNamedRoles", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAllNamedRoles), arg0)
}

// GetAllNamedSubjects mocks base method
func (m *MockIDistributedEnforcer) GetAllNamedSubjects(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNamedSubjects", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllNamedSubjects indicates an expected call of GetAllNamedSubjects
func (mr *MockIDistributedEnforcerMockRecorder) GetAllNamedSubjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNamedSubjects", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAllNamedSubjects), arg0)
}

// GetAllObjects mocks base method
func (m *MockIDistributedEnforcer) GetAllObjects() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllObjects")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllObjects indicates an expected call of GetAllObjects
func (mr *MockIDistributedEnforcerMockRecorder) GetAllObjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllObjects", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAllObjects))
}

// GetAllRoles mocks base method
func (m *MockIDistributedEnforcer) GetAllRoles() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllRoles indicates an expected call of GetAllRoles
func (mr *MockIDistributedEnforcerMockRecorder) GetAllRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAllRoles))
}

// GetAllSubjects mocks base method
func (m *MockIDistributedEnforcer) GetAllSubjects() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubjects")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllSubjects indicates an expected call of GetAllSubjects
func (mr *MockIDistributedEnforcerMockRecorder) GetAllSubjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubjects", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetAllSubjects))
}

// GetFilteredGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) GetFilteredGroupingPolicy(arg0 int, arg1 ...string) [][]string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilteredGroupingPolicy", varargs...)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetFilteredGroupingPolicy indicates an expected call of GetFilteredGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) GetFilteredGroupingPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetFilteredGroupingPolicy), varargs...)
}

// GetFilteredNamedGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) GetFilteredNamedGroupingPolicy(arg0 string, arg1 int, arg2 ...string) [][]string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilteredNamedGroupingPolicy", varargs...)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetFilteredNamedGroupingPolicy indicates an expected call of GetFilteredNamedGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) GetFilteredNamedGroupingPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredNamedGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetFilteredNamedGroupingPolicy), varargs...)
}

// GetFilteredNamedPolicy mocks base method
func (m *MockIDistributedEnforcer) GetFilteredNamedPolicy(arg0 string, arg1 int, arg2 ...string) [][]string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilteredNamedPolicy", varargs...)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetFilteredNamedPolicy indicates an expected call of GetFilteredNamedPolicy
func (mr *MockIDistributedEnforcerMockRecorder) GetFilteredNamedPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredNamedPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetFilteredNamedPolicy), varargs...)
}

// GetFilteredPolicy mocks base method
func (m *MockIDistributedEnforcer) GetFilteredPolicy(arg0 int, arg1 ...string) [][]string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilteredPolicy", varargs...)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetFilteredPolicy indicates an expected call of GetFilteredPolicy
func (mr *MockIDistributedEnforcerMockRecorder) GetFilteredPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetFilteredPolicy), varargs...)
}

// GetGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) GetGroupingPolicy() [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupingPolicy")
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetGroupingPolicy indicates an expected call of GetGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) GetGroupingPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetGroupingPolicy))
}

// GetImplicitPermissionsForUser mocks base method
func (m *MockIDistributedEnforcer) GetImplicitPermissionsForUser(arg0 string, arg1 ...string) ([][]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImplicitPermissionsForUser", varargs...)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImplicitPermissionsForUser indicates an expected call of GetImplicitPermissionsForUser
func (mr *MockIDistributedEnforcerMockRecorder) GetImplicitPermissionsForUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImplicitPermissionsForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetImplicitPermissionsForUser), varargs...)
}

// GetImplicitRolesForUser mocks base method
func (m *MockIDistributedEnforcer) GetImplicitRolesForUser(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImplicitRolesForUser", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImplicitRolesForUser indicates an expected call of GetImplicitRolesForUser
func (mr *MockIDistributedEnforcerMockRecorder) GetImplicitRolesForUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImplicitRolesForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetImplicitRolesForUser), varargs...)
}

// GetImplicitUsersForPermission mocks base method
func (m *MockIDistributedEnforcer) GetImplicitUsersForPermission(arg0 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImplicitUsersForPermission", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImplicitUsersForPermission indicates an expected call of GetImplicitUsersForPermission
func (mr *MockIDistributedEnforcerMockRecorder) GetImplicitUsersForPermission(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImplicitUsersForPermission", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetImplicitUsersForPermission), arg0...)
}

// GetModel mocks base method
func (m *MockIDistributedEnforcer) GetModel() model.Model {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel")
	ret0, _ := ret[0].(model.Model)
	return ret0
}

// GetModel indicates an expected call of GetModel
func (mr *MockIDistributedEnforcerMockRecorder) GetModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetModel))
}

// GetNamedGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) GetNamedGroupingPolicy(arg0 string) [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamedGroupingPolicy", arg0)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetNamedGroupingPolicy indicates an expected call of GetNamedGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) GetNamedGroupingPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetNamedGroupingPolicy), arg0)
}

// GetNamedPolicy mocks base method
func (m *MockIDistributedEnforcer) GetNamedPolicy(arg0 string) [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamedPolicy", arg0)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetNamedPolicy indicates an expected call of GetNamedPolicy
func (mr *MockIDistributedEnforcerMockRecorder) GetNamedPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetNamedPolicy), arg0)
}

// GetPermissionsForUser mocks base method
func (m *MockIDistributedEnforcer) GetPermissionsForUser(arg0 string, arg1 ...string) [][]string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermissionsForUser", varargs...)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetPermissionsForUser indicates an expected call of GetPermissionsForUser
func (mr *MockIDistributedEnforcerMockRecorder) GetPermissionsForUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetPermissionsForUser), varargs...)
}

// GetPermissionsForUserInDomain mocks base method
func (m *MockIDistributedEnforcer) GetPermissionsForUserInDomain(arg0, arg1 string) [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForUserInDomain", arg0, arg1)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetPermissionsForUserInDomain indicates an expected call of GetPermissionsForUserInDomain
func (mr *MockIDistributedEnforcerMockRecorder) GetPermissionsForUserInDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForUserInDomain", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetPermissionsForUserInDomain), arg0, arg1)
}

// GetPolicy mocks base method
func (m *MockIDistributedEnforcer) GetPolicy() [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy")
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockIDistributedEnforcerMockRecorder) GetPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetPolicy))
}

// GetRoleManager mocks base method
func (m *MockIDistributedEnforcer) GetRoleManager() rbac.RoleManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleManager")
	ret0, _ := ret[0].(rbac.RoleManager)
	return ret0
}

// GetRoleManager indicates an expected call of GetRoleManager
func (mr *MockIDistributedEnforcerMockRecorder) GetRoleManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleManager", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetRoleManager))
}

// GetRolesForUser mocks base method
func (m *MockIDistributedEnforcer) GetRolesForUser(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRolesForUser", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesForUser indicates an expected call of GetRolesForUser
func (mr *MockIDistributedEnforcerMockRecorder) GetRolesForUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetRolesForUser), varargs...)
}

// GetRolesForUserInDomain mocks base method
func (m *MockIDistributedEnforcer) GetRolesForUserInDomain(arg0, arg1 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesForUserInDomain", arg0, arg1)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRolesForUserInDomain indicates an expected call of GetRolesForUserInDomain
func (mr *MockIDistributedEnforcerMockRecorder) GetRolesForUserInDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesForUserInDomain", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetRolesForUserInDomain), arg0, arg1)
}

// GetUsersForRole mocks base method
func (m *MockIDistributedEnforcer) GetUsersForRole(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersForRole", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForRole indicates an expected call of GetUsersForRole
func (mr *MockIDistributedEnforcerMockRecorder) GetUsersForRole(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForRole", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetUsersForRole), varargs...)
}

// GetUsersForRoleInDomain mocks base method
func (m *MockIDistributedEnforcer) GetUsersForRoleInDomain(arg0, arg1 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForRoleInDomain", arg0, arg1)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetUsersForRoleInDomain indicates an expected call of GetUsersForRoleInDomain
func (mr *MockIDistributedEnforcerMockRecorder) GetUsersForRoleInDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForRoleInDomain", reflect.TypeOf((*MockIDistributedEnforcer)(nil).GetUsersForRoleInDomain), arg0, arg1)
}

// HasGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) HasGroupingPolicy(arg0 ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasGroupingPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasGroupingPolicy indicates an expected call of HasGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) HasGroupingPolicy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).HasGroupingPolicy), arg0...)
}

// HasNamedGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) HasNamedGroupingPolicy(arg0 string, arg1 ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasNamedGroupingPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNamedGroupingPolicy indicates an expected call of HasNamedGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) HasNamedGroupingPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNamedGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).HasNamedGroupingPolicy), varargs...)
}

// HasNamedPolicy mocks base method
func (m *MockIDistributedEnforcer) HasNamedPolicy(arg0 string, arg1 ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasNamedPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNamedPolicy indicates an expected call of HasNamedPolicy
func (mr *MockIDistributedEnforcerMockRecorder) HasNamedPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNamedPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).HasNamedPolicy), varargs...)
}

// HasPermissionForUser mocks base method
func (m *MockIDistributedEnforcer) HasPermissionForUser(arg0 string, arg1 ...string) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasPermissionForUser", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPermissionForUser indicates an expected call of HasPermissionForUser
func (mr *MockIDistributedEnforcerMockRecorder) HasPermissionForUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPermissionForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).HasPermissionForUser), varargs...)
}

// HasPolicy mocks base method
func (m *MockIDistributedEnforcer) HasPolicy(arg0 ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPolicy indicates an expected call of HasPolicy
func (mr *MockIDistributedEnforcerMockRecorder) HasPolicy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).HasPolicy), arg0...)
}

// HasRoleForUser mocks base method
func (m *MockIDistributedEnforcer) HasRoleForUser(arg0, arg1 string, arg2 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasRoleForUser", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRoleForUser indicates an expected call of HasRoleForUser
func (mr *MockIDistributedEnforcerMockRecorder) HasRoleForUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRoleForUser", reflect.TypeOf((*MockIDistributedEnforcer)(nil).HasRoleForUser), varargs...)
}

// InitWithAdapter mocks base method
func (m *MockIDistributedEnforcer) InitWithAdapter(arg0 string, arg1 persist.Adapter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitWithAdapter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitWithAdapter indicates an expected call of InitWithAdapter
func (mr *MockIDistributedEnforcerMockRecorder) InitWithAdapter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitWithAdapter", reflect.TypeOf((*MockIDistributedEnforcer)(nil).InitWithAdapter), arg0, arg1)
}

// InitWithFile mocks base method
func (m *MockIDistributedEnforcer) InitWithFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitWithFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitWithFile indicates an expected call of InitWithFile
func (mr *MockIDistributedEnforcerMockRecorder) InitWithFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitWithFile", reflect.TypeOf((*MockIDistributedEnforcer)(nil).InitWithFile), arg0, arg1)
}

// InitWithModelAndAdapter mocks base method
func (m *MockIDistributedEnforcer) InitWithModelAndAdapter(arg0 model.Model, arg1 persist.Adapter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitWithModelAndAdapter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitWithModelAndAdapter indicates an expected call of InitWithModelAndAdapter
func (mr *MockIDistributedEnforcerMockRecorder) InitWithModelAndAdapter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitWithModelAndAdapter", reflect.TypeOf((*MockIDistributedEnforcer)(nil).InitWithModelAndAdapter), arg0, arg1)
}

// IsFiltered mocks base method
func (m *MockIDistributedEnforcer) IsFiltered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFiltered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFiltered indicates an expected call of IsFiltered
func (mr *MockIDistributedEnforcerMockRecorder) IsFiltered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFiltered", reflect.TypeOf((*MockIDistributedEnforcer)(nil).IsFiltered))
}

// LoadFilteredPolicy mocks base method
func (m *MockIDistributedEnforcer) LoadFilteredPolicy(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFilteredPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFilteredPolicy indicates an expected call of LoadFilteredPolicy
func (mr *MockIDistributedEnforcerMockRecorder) LoadFilteredPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFilteredPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).LoadFilteredPolicy), arg0)
}

// LoadIncrementalFilteredPolicy mocks base method
func (m *MockIDistributedEnforcer) LoadIncrementalFilteredPolicy(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIncrementalFilteredPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIncrementalFilteredPolicy indicates an expected call of LoadIncrementalFilteredPolicy
func (mr *MockIDistributedEnforcerMockRecorder) LoadIncrementalFilteredPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIncrementalFilteredPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).LoadIncrementalFilteredPolicy), arg0)
}

// LoadModel mocks base method
func (m *MockIDistributedEnforcer) LoadModel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadModel")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadModel indicates an expected call of LoadModel
func (mr *MockIDistributedEnforcerMockRecorder) LoadModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadModel", reflect.TypeOf((*MockIDistributedEnforcer)(nil).LoadModel))
}

// LoadPolicy mocks base method
func (m *MockIDistributedEnforcer) LoadPolicy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPolicy")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPolicy indicates an expected call of LoadPolicy
func (mr *MockIDistributedEnforcerMockRecorder) LoadPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).LoadPolicy))
}

// RemoveFilteredGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) RemoveFilteredGroupingPolicy(arg0 int, arg1 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilteredGroupingPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilteredGroupingPolicy indicates an expected call of RemoveFilteredGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) RemoveFilteredGroupingPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveFilteredGroupingPolicy), varargs...)
}

// RemoveFilteredNamedGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) RemoveFilteredNamedGroupingPolicy(arg0 string, arg1 int, arg2 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilteredNamedGroupingPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilteredNamedGroupingPolicy indicates an expected call of RemoveFilteredNamedGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) RemoveFilteredNamedGroupingPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredNamedGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveFilteredNamedGroupingPolicy), varargs...)
}

// RemoveFilteredNamedPolicy mocks base method
func (m *MockIDistributedEnforcer) RemoveFilteredNamedPolicy(arg0 string, arg1 int, arg2 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilteredNamedPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilteredNamedPolicy indicates an expected call of RemoveFilteredNamedPolicy
func (mr *MockIDistributedEnforcerMockRecorder) RemoveFilteredNamedPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredNamedPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveFilteredNamedPolicy), varargs...)
}

// RemoveFilteredPolicy mocks base method
func (m *MockIDistributedEnforcer) RemoveFilteredPolicy(arg0 int, arg1 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilteredPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilteredPolicy indicates an expected call of RemoveFilteredPolicy
func (mr *MockIDistributedEnforcerMockRecorder) RemoveFilteredPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveFilteredPolicy), varargs...)
}

// RemoveFilteredPolicySelf mocks base method
func (m *MockIDistributedEnforcer) RemoveFilteredPolicySelf(arg0 func() bool, arg1, arg2 string, arg3 int, arg4 ...string) ([][]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilteredPolicySelf", varargs...)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilteredPolicySelf indicates an expected call of RemoveFilteredPolicySelf
func (mr *MockIDistributedEnforcerMockRecorder) RemoveFilteredPolicySelf(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredPolicySelf", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveFilteredPolicySelf), varargs...)
}

// RemoveGroupingPolicies mocks base method
func (m *MockIDistributedEnforcer) RemoveGroupingPolicies(arg0 [][]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroupingPolicies", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGroupingPolicies indicates an expected call of RemoveGroupingPolicies
func (mr *MockIDistributedEnforcerMockRecorder) RemoveGroupingPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroupingPolicies", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveGroupingPolicies), arg0)
}

// RemoveGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) RemoveGroupingPolicy(arg0 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveGroupingPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGroupingPolicy indicates an expected call of RemoveGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) RemoveGroupingPolicy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveGroupingPolicy), arg0...)
}

// RemoveNamedGroupingPolicies mocks base method
func (m *MockIDistributedEnforcer) RemoveNamedGroupingPolicies(arg0 string, arg1 [][]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNamedGroupingPolicies", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNamedGroupingPolicies indicates an expected call of RemoveNamedGroupingPolicies
func (mr *MockIDistributedEnforcerMockRecorder) RemoveNamedGroupingPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamedGroupingPolicies", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveNamedGroupingPolicies), arg0, arg1)
}

// RemoveNamedGroupingPolicy mocks base method
func (m *MockIDistributedEnforcer) RemoveNamedGroupingPolicy(arg0 string, arg1 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveNamedGroupingPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNamedGroupingPolicy indicates an expected call of RemoveNamedGroupingPolicy
func (mr *MockIDistributedEnforcerMockRecorder) RemoveNamedGroupingPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamedGroupingPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveNamedGroupingPolicy), varargs...)
}

// RemoveNamedPolicies mocks base method
func (m *MockIDistributedEnforcer) RemoveNamedPolicies(arg0 string, arg1 [][]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNamedPolicies", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNamedPolicies indicates an expected call of RemoveNamedPolicies
func (mr *MockIDistributedEnforcerMockRecorder) RemoveNamedPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamedPolicies", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveNamedPolicies), arg0, arg1)
}

// RemoveNamedPolicy mocks base method
func (m *MockIDistributedEnforcer) RemoveNamedPolicy(arg0 string, arg1 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveNamedPolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNamedPolicy indicates an expected call of RemoveNamedPolicy
func (mr *MockIDistributedEnforcerMockRecorder) RemoveNamedPolicy(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNamedPolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemoveNamedPolicy), varargs...)
}

// RemovePolicies mocks base method
func (m *MockIDistributedEnforcer) RemovePolicies(arg0 [][]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicies", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicies indicates an expected call of RemovePolicies
func (mr *MockIDistributedEnforcerMockRecorder) RemovePolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicies", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemovePolicies), arg0)
}

// RemovePolicy mocks base method
func (m *MockIDistributedEnforcer) RemovePolicy(arg0 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePolicy", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicy indicates an expected call of RemovePolicy
func (mr *MockIDistributedEnforcerMockRecorder) RemovePolicy(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemovePolicy), arg0...)
}

// RemovePolicySelf mocks base method
func (m *MockIDistributedEnforcer) RemovePolicySelf(arg0 func() bool, arg1, arg2 string, arg3 [][]string) ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicySelf", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicySelf indicates an expected call of RemovePolicySelf
func (mr *MockIDistributedEnforcerMockRecorder) RemovePolicySelf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicySelf", reflect.TypeOf((*MockIDistributedEnforcer)(nil).RemovePolicySelf), arg0, arg1, arg2, arg3)
}

// SavePolicy mocks base method
func (m *MockIDistributedEnforcer) SavePolicy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePolicy")
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePolicy indicates an expected call of SavePolicy
func (mr *MockIDistributedEnforcerMockRecorder) SavePolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePolicy", reflect.TypeOf((*MockIDistributedEnforcer)(nil).SavePolicy))
}

// SetAdapter mocks base method
func (m *MockIDistributedEnforcer) SetAdapter(arg0 persist.Adapter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAdapter", arg0)
}

// SetAdapter indicates an expected call of SetAdapter
func (mr *MockIDistributedEnforcerMockRecorder) SetAdapter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdapter", reflect.TypeOf((*MockIDistributedEnforcer)(nil).SetAdapter), arg0)
}

// SetDispatcher mocks base method
func (m *MockIDistributedEnforcer) SetDispatcher(arg0 persist.Dispatcher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDispatcher", arg0)
}

// SetDispatcher indicates an expected call of SetDispatcher
func (mr *MockIDistributedEnforcerMockRecorder) SetDispatcher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDispatcher", reflect.TypeOf((*MockIDistributedEnforcer)(nil).SetDispatcher), arg0)
}

// SetEffector mocks base method
func (m *MockIDistributedEnforcer) SetEffector(arg0 effect.Effector) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEffector", arg0)
}

// SetEffector indicates an expected call of SetEffector
func (mr *MockIDistributedEnforcerMockRecorder) SetEffector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEffector", reflect.TypeOf((*MockIDistributedEnforcer)(nil).SetEffector), arg0)
}

// SetModel mocks base method
func (m *MockIDistributedEnforcer) SetModel(arg0 model.Model) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModel", arg0)
}

// SetModel indicates an expected call of SetModel
func (mr *MockIDistributedEnforcerMockRecorder) SetModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModel", reflect.TypeOf((*MockIDistributedEnforcer)(nil).SetModel), arg0)
}

// SetRoleManager mocks base method
func (m *MockIDistributedEnforcer) SetRoleManager(arg0 rbac.RoleManager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRoleManager", arg0)
}

// SetRoleManager indicates an expected call of SetRoleManager
func (mr *MockIDistributedEnforcerMockRecorder) SetRoleManager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoleManager", reflect.TypeOf((*MockIDistributedEnforcer)(nil).SetRoleManager), arg0)
}

// SetWatcher mocks base method
func (m *MockIDistributedEnforcer) SetWatcher(arg0 persist.Watcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWatcher", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWatcher indicates an expected call of SetWatcher
func (mr *MockIDistributedEnforcerMockRecorder) SetWatcher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWatcher", reflect.TypeOf((*MockIDistributedEnforcer)(nil).SetWatcher), arg0)
}

// UpdatePolicySelf mocks base method
func (m *MockIDistributedEnforcer) UpdatePolicySelf(arg0 func() bool, arg1, arg2 string, arg3, arg4 []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicySelf", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicySelf indicates an expected call of UpdatePolicySelf
func (mr *MockIDistributedEnforcerMockRecorder) UpdatePolicySelf(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicySelf", reflect.TypeOf((*MockIDistributedEnforcer)(nil).UpdatePolicySelf), arg0, arg1, arg2, arg3, arg4)
}
